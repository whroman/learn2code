{
	"pages": [
		{"title": "_lesson-order", "text": "\n(coding) our first commands\n(lecture) what is the terminal\n(coding) exploring the file system\n(lecture) customize your console\n\n", "tags": "", "url": "chapters/terminal-101/_lesson-order.html"},
		{"title": "_requirements", "text": "\ninstall xcode https://itunes.apple.com/us/app/xcode/id497799835?mt=12\ninstall sublime text editor https://www.sublimetext.com/3\n\n", "tags": "", "url": "chapters/terminal-101/_requirements.html"},
		{"title": "Customizing our CLI", "text": "Customizing our CLI\n(eta: 5-10 mins)\nstyling\n\nwith Terminal open, go to upper left, click &quot;Terminal&quot;, then &quot;Preferences...&quot;\nchange background color\nchange background opacity\nchange &quot;text&quot; and &quot;bold text&quot; colors\n\n\n\n", "tags": "", "url": "chapters/terminal-101/customizing-our-cli.html"},
		{"title": "exploring the file system", "text": "exploring the file system\n(new execs in this lesson: cd, touch, man, rm)\n(length: 25-30 mins)\nwhat is a file system?\n\na collection of files and directories\ndirectories can only hold files or other directories\nFinder is probably how you&#39;re most familiar to getting around a file system\nshow example with finder\n\n\nin the terminal, we have to use commands in order to navigate the file system, which we will now learn to do\n\nnavigating the file system\n\nwe&#39;re going to use a new executable, cd\nit stands for &quot;change directory&quot;\n\n(EXEC) ls .\n\nsee the dirs and files of your current dir\n\n\n(EXEC) cd Documents\nenglish translation:   \n\n\n(EXEC) ls .\nsee the dirs and files of Documents\ncompare to Finder\n\n\n(EXEC) cd ../\nenglish translation:  \nfamily relations are used to describe file systems:\nparent, child, sibling\nshow example of each relationship in Finder \n\n\nnow we&#39;re back where we started\n\n\n(EXEC) ls .\nnow we see that these are the same files and dirs that we had when we began\n\n\n\ncreating and deleting files\n\n(EXEC) touch hello.txt\nenglish translation:   \n\n\n(Q) how can we check to see whether this file exists?\n(EXEC) ls .\nview in finder\nshow file through both methods\n\n\n(EXEC) rm hello.txt\nenglish translation:  &lt;hello.txt&gt;\n\n\n(Q) how can we make sure this file was deleted?\nsame as above\n\n\n\ncommand history\n\nyou can press &quot;up arrow&quot; to cycle back through your history of executed commads\nuse &quot;down arrow&quot; to cycle forward\n\nerrors are your friend\n\ncycle through your history and get to (EXEC) rm hello.txt\nexecute it\nresult is error: (EXEC) rm: foo.txt: No such file or directory\nwe were telling the terminal to delete a file that doesnt exist, so the terminal let us know that this file doesnt exist\n\ncreating directories\n\nwe&#39;re going to create a new directory, so lets make sure that it doesnt exist yet in our file system:\n(EXEC) ls .\n(EXEC) mkdir hello\nenglish translation:  \n\n\n\n\n\ncommand history\n\nuse terminal history (&quot;up arrow&quot;) to get to ls . and execute it\nmake sure that the hello dir is there\n\n\n\nattempt to delete a directory\n\n(EXEC) rm hello\nenglish translation:  &lt;&quot;hello&quot;&gt;\nrm: hello/: is a directory\nwhat do we do...?\n\n\n\nman &lt;exec&gt;\n\nenglish translation:  \nlets use man to find out if we can use rm to delete dirs\n(EXEC) man rm\nwe&#39;re in a file-read mode!\ninterface:\n&quot;space bar&quot;   ||     &quot;scroll down&quot;\n&quot;b&quot;             ||     &quot;scroll up&quot;\n&quot;q&quot;           ||  &quot;exit read mode&quot;\n\n\nfind entry for -d\npress q\n\n\n\n(EXEC) rm -d hello\n                                        exec     option          argument\n\nenglish translation:   &lt;&quot;hello&quot;&gt;\noptions are always specified with a -\nwe should have succeeded this time in deleting hello\ncheck using ls .\n\nFUN FACT\n\ndont do this!\nsudo rm -rf .\n\ncommand options\nif commands are like sentences to computers,\nand executables are like verbs to computers,\nand arguments are like nouns to computers,\nthen what are options?\noptions are like adverbs. they modify our exectuables/verbs/actions.\n", "tags": "", "url": "chapters/terminal-101/exploring-the-file-system.html"},
		{"title": "Our First Commands", "text": "Our First Commands\nnew executables: open + ls\nlength: 10-15 mins\nour first command: open\n\nopen terminal\ntype open .\npress &quot;enter&quot;\n\nwe just executed our first command!\nin other words, you typed something into your terminal and pressed &quot;enter&quot;\nthink of commands as sentences for computers\ndissecting open .\n\n\n\nlanguage\nsentence\n\n\n\n\nbash\nopen .\n\n\nenglish\n&quot;open with Finder&quot;  &quot;this directory&quot;\n\n\ngeneralized\n&quot;take this action&quot; &quot;onto this&quot;\n\n\nlinguistic\n&quot;verb&quot; &quot;prepositional phrase&quot;\n\n\ncomputer sci\n&quot;executable&quot; &quot;argument&quot;\n\n\n\nwhat is a &quot;command&quot;?\n\nwe can perform actions in a terminal by &quot;executing commands&quot;\n\na command is composed of three parts:\n\nexecutable\narguments\noptions\n\n\nwe&#39;ll only deal with executables and arguments for now\n\nthe parts of a command are separated by spaces, just like in written english\n\n\nthe executable\nopen .\n\nthe first part of any command is the executable\nfor this command, the executable is open\nthink of executables as the verbs of the CLI\nan executable is the action that we want to occur\n\nthe argument\nopen .\n\nin this command, the . is called an argument\nthink of arguments as the nouns of the CLI\nan argument describes what we want to act upon with our executable (aka verb)\n\n\n\nexecute ls .\n\nL i S t\ncompare the terminal output with the Finder dir\ntranslation to english:  \nnow we&#39;ve seen two different commands, open and ls, use . as an argument\n\n", "tags": "", "url": "chapters/terminal-101/our-first-commands.html"},
		{"title": "What is the terminal and why do we need it?", "text": "What is the terminal and why do we need it?\nlength: 10-15 mins\nall technology has an interface\n(Q) our interaction with macs mainly depends on these three components:\n\n    keyboards\n    mice\n    screen\n    \n\n\ncompare to household object(s)\n\nmicrowave\nLED display, buttons, dials, etc\n\n\nsmartphone\ntouchscreen, buttons, microphone\n\n\nask students\n\nthere are two ways to interfact with our macs\n\nGraphic User Interface\n\nkeyboard, screen, mouse simultaneously\ngraphic-based interface\nlayered windows\nclicking on the screen makes stuff happen\n\n\n\n\nCommand Line Interface\n\nonly keyboard and screen\ntext-based interface\nclicking on the screen DOES NOT make stuff happen\n\n\n\n\n\neach interface is better suited for different tasks\n\nGUI\n\ngreat for visual content\nphotos\nvideos\nforms\nuse fb page as example\n\n\nlearning curve is much smaller than the CLI\n\n\nCLI\n\nno input restrictions\ni can surf the web, delete my hard drive, edit text\n\n\n\n\n\n", "tags": "", "url": "chapters/terminal-101/what-is-the-terminal.html"}
	]
}
